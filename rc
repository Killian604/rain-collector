#!python
"""
Do not use % sign
"""
from backend import app, logging_extra
from typing import List
import argparse
import os
import sys


class rc(object):
    """ Custom arg-parsing object that relies on user commands """
    pass
    def __init__(self):
        funcs = [f'> {f}' for f in dir(self) if callable(getattr(self, f)) and '__' not in f]
        funcs_str = '\n'.join(funcs)
        parser = argparse.ArgumentParser(
            prog='rc',
            usage=f"""
Main tool for repo

Available commands:
{funcs_str}

""",
            epilog="""""",
        )
        parser.add_argument('command', help='command to run')
        # TODO: low: enumerate potential commands for users in help message
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print(f'Unrecognized command: {args.command}')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()


    # Commands
    def asr(self):
        parser = argparse.ArgumentParser(
            prog=None,
            usage="""
Boot ASR server
    """,
        )
        # parser.add_argument('-i', '--input', required=True, help='Required: a path to an mp3 file')
        # parser.add_argument('-o', '--output', required=True, help='Required: a path to output wav file. ')
        # parser.add_argument('-f', '--force', required=False, action='store_true', default=False, help='Optional: force overwrite')
        args = parser.parse_args(sys.argv[2:])
        app.asr(
            # args.input,
            # args.output,
            # force=args.force,
        )


    def counttokens(self):
        parser = argparse.ArgumentParser(
            usage="""
Description: count tokens of files
Form:
- python nx counttokens -i [filepath]

Examples:
- python nx counttokens -i music.mp3 -o music.wav
""",
        )
        parser.add_argument('-i', '--input', required=True, type=str, nargs='+', help='Required: ')
        parser.add_argument('-m', '--model', required=False, help='Optional: ')
        args = parser.parse_args(sys.argv[2:])
        app.counttokens(
            args.input,
            args.model,
        )


    def mp3towav(self):
        parser = argparse.ArgumentParser(
            prog=None,
            usage="""
Description: convert mp3 to wav
Form:
- python nx mp3towav -i [mp3path] -o [wavpath]
Examples:
- python nx mp3towav -i music.mp3 -o music.wav

    """,
        )
        parser.add_argument('-i', '--input', required=True, help='Required: a path to an mp3 file')
        parser.add_argument('-o', '--output', required=True, help='Required: a path to output wav file. ')
        parser.add_argument('-f', '--force', required=False, action='store_true', default=False, help='Optional: force overwrite')
        args = parser.parse_args(sys.argv[2:])
        app.mp3towav(
            args.input,
            args.output,
            force=args.force,
        )

    def mp4tomp3(self):
        parser = argparse.ArgumentParser(
            prog=None,
            usage="""
Description: convert mp4 to mp3
Form:
- python nx mp4tomp3 -i [mp3path] -o [wavpath]
Examples:
- python nx mp4tomp3 -i music.mp3 -o music.wav

    """,
        )
        parser.add_argument('-i', '--input', required=True, help='Required: a path to an mp3 file')
        parser.add_argument('-o', '--output', required=True, help='Required: a path to output wav file. ')
        parser.add_argument('-f', '--force', required=False, action='store_true', default=False, help='Optional: force overwrite')
        args = parser.parse_args(sys.argv[2:])
        app.mp4tomp3(
            args.input,
            args.output,
            force=args.force,
        )
        pass

    def tokens(self):
        return self.counttokens()



if __name__ == '__main__':
    rc()
